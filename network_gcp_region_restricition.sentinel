#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"

prefix = ["us-","northamerica-","nam-"]
denied_region = ["nam-eur-asia1"]
multi_region_var = ["US"]

# Resource Types Region Map
resourceTypesRegionMap = {
	"google_pubsub_topic": {
		"key": "message_storage_policy.0.allowed_persistence_regions",
	},
	"google_bigquery_dataset": {
		"key": "location",
	},
	"google_dataproc_cluster": {
		"key": "region",
	},
	"google_secret_manager_secret": {
		"key":          "replication.0.user_managed.0.replicas",
		"location_key": "location",
	},
	"google_dialogflow_cx_agent": {
		"key": "location",
	},
	"google_compute_interconnect_attachment": {
		"key": "region",
	},
	"google_spanner_instance": {
		"key": "config",
	},
}

# Function to check region prefix OR location prefix
check_for_matches = func(location, address, rc) {
	violations = {}
	for location as lk {
		#print(lk)
		if lk in denied_region {
			violations[address] = rc
		}
		resource_prefix = strings.split(lk, "-")[0] + "-"
        print(resource_prefix)
		if not (resource_prefix in prefix or lk in multi_region_var) {
			violations[address] = rc
		}
	}
	return violations
}

# Get List Element Type
get_list_element_type = func(list) {
	for list as each_element {
		if types.type_of(each_element) is "string" {
			return "string"
		} else if types.type_of(each_element) is "map" {
			return "map"
		} else {
			return "unknown"
		}
	}
}

# check for Array of map with a specific Key
check_for_location = func(address, rc, location_key_param, location_key) {
	violations = {}
	locations = []
	location = plan.evaluate_attribute(rc.change.after, location_key_param)

	is_undefined = rule { types.type_of(location) is "undefined" }
	if is_undefined {
		violations[address] = rc
	} else {
		is_type = types.type_of(location)
		if is_type is "string" {
			append(locations, location)
		} else if is_type is "list" {
			if get_list_element_type(location) is "string" {
				locations = location
			} else if get_list_element_type(location) is "map" {
				for location as each_map {
					each_location = plan.evaluate_attribute(each_map, location_key)
					append(locations, each_location)
				}
			}
		}
		match = check_for_matches(locations, address, rc)
		violations = match
	}
	return violations
}

allResources = {}
for resourceTypesRegionMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}

msgs = {}
for allResources as address, rc {
	msg = check_for_location(
		address,
		rc,
		resourceTypesRegionMap[rc["type"]]["key"],
		resourceTypesRegionMap[rc["type"]]["location_key"],
	)
	if length(msg) > 0 {
		msgs[address] = msg
	}
}

GCP_RES_LOCATION = rule { length(msgs) is 0 }
print(msgs)

# Main rule
main = rule { GCP_RES_LOCATION }