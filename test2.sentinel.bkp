#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"

prefix = "us-"
multi_region_var = ["US"]

# Resource Types Region Map
resourceTypesRegionMap = {
	"google_pubsub_topic": {
		"key":   "message_storage_policy.0.allowed_persistence_regions",
		#"multi_region" : true,
	},
	"google_bigquery_dataset" : {
		"key":   "location",
		#"multi_region" : false,
	},

}



allResources = {}
for resourceTypesRegionMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}

#print (allResources)


check_for_location = func(address, rc, location_key_param) {
	violations = {}
	locations = []
	address = rc["address"]
	location = plan.evaluate_attribute(rc.change.after, location_key_param)
	#print(location)

	is_undefined = rule { types.type_of(location) is "undefined" }
	
	if is_undefined is true {
		 #violations[address] = rc
		 return violations
		 #return "hi"

	} else {

		#return "abcd"

		#location2 = plan.evaluate_attribute(rc.change.after, location_key_param)
		#print(location)

		is_string = rule { types.type_of(location) is "string" }
		#print(is_string)

		if is_string {

			#print("hiiiiii")
			append(locations, location)
			#print(locations)
		
		} else {

			locations = location
			#print(locations)
		}

		#print(locations)
	
	for locations as lk,rc {
		    print(rc)
			if not strings.has_prefix(lk, prefix) or lk not in multi_region_var {
				#print(lk)
				#violations[address] = rc
				return ""
			}
		}
	}
}


msgs = {}
for allResources as address, rc {
	msg = check_for_location(
		address,
		rc,
		resourceTypesRegionMap[rc["type"]]["key"],
	)
	print(msg)
		if length(msg) > 0 {
		msgs[address] = msg
	}
}

GCP_RES_LOCATION = rule { length(msgs) is 0 }
	

# Main rule
main = rule { GCP_RES_LOCATION }
