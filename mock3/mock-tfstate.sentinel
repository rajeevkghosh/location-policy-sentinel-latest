import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_spanner_instance": {
				"example": {
					0: {
						"attr": {
							"config":        "projects/airline1-sabre-wolverine/instanceConfigs/nam3",
							"display_name":  "us-dev_abcd_fghi_spanner1",
							"force_destroy": false,
							"id":            "airline1-sabre-wolverine/tfgen-spanid-20211123161757611",
							"labels": {
								"application_division": "pci",
								"application_name":     "demo",
								"application_role":     "app",
								"au":                   "0223092",
								"created":              "20211122",
								"data_compliance":      "pci",
								"data_confidentiality": "pub",
								"data_type":            "test",
								"env":                  "default",
								"environment":          "dev",
								"gcp_region":           "us",
								"owner":                "hybridenv",
							},
							"name":             "tfgen-spanid-20211123161757611",
							"num_nodes":        2,
							"processing_units": 2000,
							"project":          "airline1-sabre-wolverine",
							"state":            "READY",
							"timeouts":         null,
						},
						"depends_on": [],
						"id":         "airline1-sabre-wolverine/tfgen-spanid-20211123161757611",
						"tainted":    false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "1.0.11"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
